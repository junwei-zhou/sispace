141. 环形链表
给定一个链表，判断链表中是否有环。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

 
示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。


法一：借助辅助空间

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        a = set() 
        while head:
            
            if head in a:
                return True
            a.add(head)
            head = head.next
        return False



法二： 快慢指针法

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        slow = fast = head
        # if not head：  # 没必要这样写可以加入while循环判断更简洁
        #     return False

        while fast and fast.next:  # 防止head为空和出现空指针的next的情况
            slow = slow.next
            fast = fast.next.next
            if slow is fast:
                return True
        return False


情况一：链表部分成环O(n)；
部分成环时，快指针先于慢指针进入环，慢指针进环时间O(n)；当快慢指针都进入环，假设环节点数量为K,当快慢指针第一次相遇时，快指针至少已经在环内已经比慢指针多走一圈(多走的这一圈是当慢指针进入后开始算的)，时间O(k)； 综上，时间复杂度O(k+n)，即为O(n)

情况二：链表完全成环O(n)
同起点，第一次相遇时，快指针已经在环内已经比慢指针多走一圈；时间复杂度O(n)



哈希表的实现：
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        dic = {}
        node = head
        while(node):
            if(dic.get(node,0) != 0):
                return True
            else:
                dic[node] = 1
            node = node.next
        return False

【热切了解hash表的实现】