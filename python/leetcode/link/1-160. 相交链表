160. 相交链表
编写一个程序，找到两个单链表相交的起始节点。

如下面的两个链表：
在节点 c1 开始相交。
示例 1：

输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8
输入解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。


方法1：存链表节点进行查询
（1）遍历链表A，并将其节点存入集合（2）遍历B的每个节点并在集合中进行查询，一旦遍历过程中查询到相同节点，即说明有交点，否则无

代码

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        A = set()
        cur1 = headA
        cur2 = headB
        while cur1:
            A.add(cur1)
            cur1 = cur1.next
        while cur2:
            if cur2 in A:
                return cur2
            cur2 = cur2.next
        return None



方法2：算出链表距离差挨个对比
分别遍历两个链表，并记录两链表的长度差n，将出现两种情况，（1）如果遍历完，尾部的空节点不是同一节点（内存地址不同），那么必然是不相交
（2）若是同一节点，则说明两链表存在相交，让长链表先走n步，再同时开始走，并对比两个链表的当前节点，节点相等时即为交点

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        cur1 = headA
        cur2 = headB
        n = 0
        while cur1:
            n += 1
            cur1 = cur1.next
        while cur2:
            n -= 1
            cur2 = cur2.next
        if cur1 != cur2:
            return None
        cur1 = headA if n > 0 else headB
        cur2 = headB if cur1 == headA else headA
        n = abs(n)
        while n:
            n -= 1
            cur1 = cur1.next
        while cur1 != cur2:
            cur1 = cur1.next
            cur2 = cur2.next
        return cur1

        
        return None

方法3：拼接链表
拼接方式：（1）当A走到尾部的Null的时候，转到B链表的头节点继续走（2）当B走到尾部的Null的时候，转到B链表的头节点继续走
值得注意的是，如图所示，无论是相交还是不相交，对于无环的链表来说，都一定会相遇，因此不会死循环。

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> ListNode:
        cur1 = headA
        cur2 = headB
        while cur1 != cur2:
            cur1 = cur1.next if cur1 else headB
            cur2 = cur2.next if cur2 else headA
        return cur1





