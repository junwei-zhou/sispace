24. 两两交换链表中的节点
给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。

你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。

 

示例:

给定 1->2->3->4, 你应该返回 2->1->4->3.

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        vir_head = ListNode(0)
        vir_head.next = head
        c = vir_head
        while (c.next and c.next.next):
            a,b = c.next,c.next.next
            c.next,a.next = b,b.next
            b.next = a
            c = c.next.next
        return vir_head.next
        
        


如果当前head为None或者head.next为None，就不需要继续进行了，因为从head之后将不会有交换操作，直接返回head
先用N存下当前head的next
然后head.next.next指向后面用递归算出来的链表
把N的next指向当前head节点


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def swapPairs(self, head: ListNode) -> ListNode:
        if head == None or head.next == None:
            return head
        N = head.next
        head.next = self.swapPairs(N.next)
        N.next = head
        return N
        
