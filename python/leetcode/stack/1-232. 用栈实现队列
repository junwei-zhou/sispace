232. 用栈实现队列
使用栈实现队列的下列操作：

push(x) -- 将一个元素放入队列的尾部。
pop() -- 从队列首部移除元素。
peek() -- 返回队列首部的元素。
empty() -- 返回队列是否为空。
 

示例:

MyQueue queue = new MyQueue();

queue.push(1);
queue.push(2);  
queue.peek();  // 返回 1
queue.pop();   // 返回 1
queue.empty(); // 返回 false

#解决的方式是用一个栈追加存储。用另外一个反序栈的处理删除与获取操作。

class MyQueue:

    def __init__(self):
        self.queue = []
        self.help = []

    def push(self, x: int) -> None:
        self.queue.append(x)

    def pop(self) -> int:
        if len(self.help)==0:
            while(len(self.queue)!=0):
                self.help.append(self.queue.pop())
        return self.help.pop()   

    def peek(self) -> int:
        if len(self.help)==0:
            while(len(self.queue)!=0):
                self.help.append(self.queue.pop())
        return self.help[-1]
        
    def empty(self) -> bool:
        if len(self.queue)==0 and len(self.help)==0:
            return True
        return False

# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()
