738. 单调递增的数字
给定一个非负整数 N，找出小于或等于 N 的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。

（当且仅当每个相邻位数上的数字 x 和 y 满足 x <= y 时，我们称这个整数是单调递增的。）
输入: N = 10
输出: 9

输入: N = 332
输出: 299

首先想到的是，我们总是可以得到一个 d999...9 的候选答案（其中 0 <= d <= 9 后接一些数字9）。例如，如果 n=432543654，我们总是可以得到至少 39999999 的答案。
我们可以进行优化。例如，当数字是 123454321 时，我们可以有一个 123449999 的候选候选答案。这似乎是一个不错的策略，就是采用一个单调递增的前缀，然后在相邻的数字首次下降的索引之前（悬崖）减少这个数字，然后用 9 代替其余的字符。

算法：

我们会找到第一个悬崖 s[i-1]>s[i]。然后，当悬崖存在时，我们将减去适当的数字，然后移动 i。再把剩下的数字补上 9，最后完成扫描。
我们可以证明我们的算法是正确的，因为我们每次遇到悬崖时，减少的数字必须至少减少 1。然后，对其余数字的最大的可能选择是全部为 9。

class Solution(object):
    def monotoneIncreasingDigits(self, N):
        S = list(str(N))
        i = 1
        while i < len(S) and S[i-1] <= S[i]:
            i += 1
        while 0 < i < len(S) and S[i-1] > S[i]:
            S[i-1] = str(int(S[i-1]) - 1)
            i -= 1
        S[i+1:] = '9' * (len(S) - i-1)
        return int("".join(S))

