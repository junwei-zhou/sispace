1094. 拼车
假设你是一位顺风车司机，车上最初有capacity个空座位可以用来载客。由于道路的限制，车只能 向一个方向行驶（也就是说，不允许掉头或改变方向，你可以将其想象为一个向量）。
这儿有一份乘客行程计划表 trips[][]，其中 trips[i] = [num_passengers, start_location, end_location] 包含了第 i 组乘客的行程信息：

必须接送的乘客数量；
乘客的上车地点；
以及乘客的下车地点。
这些给出的地点位置是从你的初始 出发位置向前行驶到这些地点所需的距离（它们一定在你的行驶方向上）。

请你根据给出的行程计划表和车子的座位数，来判断你的车是否可以顺利完成接送所用乘客的任务（当且仅当你可以在所有给定的行程中接送所有乘客时，返回 true，否则请返回 false）。

 

示例 1：

输入：trips = [[2,1,5],[3,3,7]], capacity = 4
输出：false
示例 2：

输入：trips = [[2,1,5],[3,3,7]], capacity = 5
输出：true

贪心策略 主要分两部：
第一步：第一步用字典记录（站点：净上车人数（上车为正，下车为负））
第二部：依次从开始站点到结束，到每站累加并判断此时是否超过capacity，是则立即return False；否则循环完后，True

class Solution:
    def carPooling(self, trips: List[List[int]], capacity: int) -> bool:
        d={}
        for i in trips:
            if i[1] in d:
                d[i[1]]+=i[0]
            else:
                d[i[1]]=i[0]
            if i[2] in d:
                d[i[2]]-=i[0]
            else:
                d[i[2]]=-i[0]
        l=sorted(d)
        m=0
        for i in l:
            m+=d[i]
            if m>capacity:
                return False
        return True
