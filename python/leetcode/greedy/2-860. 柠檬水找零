860. 柠檬水找零
在柠檬水摊上，每一杯柠檬水的售价为 5 美元。

顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。

每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。

注意，一开始你手头没有任何零钱。

如果你能给每位顾客正确找零，返回 true ，否则返回 false 。

示例 1：

输入：[5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。

如果顾客支付了 5 美元钞票，那么我们就得到 5 美元的钞票。

如果顾客支付了 10 美元钞票，我们必须找回一张 5 美元钞票。如果我们没有 5 美元的钞票，答案就是 False ，因为我们无法正确找零。

如果顾客支付了 20 美元钞票，我们必须找回 15 美元。

如果我们有一张 10 美元和一张 5 美元，那么我们总会更愿意这样找零，这比用三张 5 美元进行找零更有利。

否则，如果我们有三张 5 美元的钞票，那么我们将这样找零。

否则，我们将无法给出总面值为 15 美元的零钱，答案是 False 。


class Solution(object): #aw
    def lemonadeChange(self, bills):
        five = ten = 0
        for bill in bills:
            if bill == 5:
                five += 1
            elif bill == 10:
                if not five: return False
                five -= 1
                ten += 1
            else:
                if ten and five:
                    ten -= 1
                    five -= 1
                elif five >= 3:
                    five -= 3
                else:
                    return False
        return True

使用hash
class Solution:
    def lemonadeChange(self, bills: List[int]) -> bool:
        money={5:0,10:0}#存放收到的钱
        for bill in bills:
            if bill==5:#收到5美元则无需找零 放到money中
                money[5]+=1
            elif bill==10:#收到10美元 需要找一张5美元
                if money[5]==0:#一张五美元都没有 不能正确找零
                    return False
                else:#有则减去一张五美元
                    money[5]-=1
                    money[10]+=1
            else:#收到了20美元 需要找一张10元和一张五元 或三张五元
                if money[10]!=0:#找一张10元和五元
                    if money[5]:
                        money[5]-=1
                        money[10]-=1
                    else:
                        return False
                elif money[5]>=3:#找三张五元
                    money[5]-=3
                else:
                    return False
        return True

