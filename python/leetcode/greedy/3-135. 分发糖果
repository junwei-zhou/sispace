135. 分发糖果
老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。

你需要按照以下要求，帮助老师给这些孩子分发糖果：

每个孩子至少分配到 1 个糖果。
相邻的孩子中，评分高的孩子必须获得更多的糖果。
那么这样下来，老师至少需要准备多少颗糖果呢？

示例 1:

输入: [1,0,2]
输出: 5
解释: 你可以分别给这三个孩子分发 2、1、2 颗糖果。
示例 2:

输入: [1,2,2]
输出: 4
解释: 你可以分别给这三个孩子分发 1、2、1 颗糖果。
     第三个孩子只得到 1 颗糖果，这已满足上述两个条件。

处理过程：
首先判断列表是否逆序且没有重复，如果是，直接返回从1到列表长度之和。
然后先给每个人分一颗糖果。
最后再次给每个人分糖果，都有两种情况：
如果当前大于前面：当前就比前面多一颗糖果；
如果当前小于前面：前面就比当前多一颗糖果，然后往前找：如果当前大于前一个而且当前和前一个的糖果一样：当前增加，如果没有：退出当前循环。
返回所有人的糖果之和。

class Solution:
    def candy(self, ratings: List[int]) -> int:
        L = len(ratings)
        for i in range(L-1):
            if ratings[i] <= ratings[i+1]:
                break
        else:
            return sum(range(1, L+1))
        retList = [1]*L
        for i in range(1, L):
            if ratings[i] > ratings[i-1]:
                retList[i] = retList[i-1]+1
            if ratings[i-1] > ratings[i]:
                retList[i-1] = max(retList[i]+1, retList[i-1])
                for j in range(i-2, -1, -1):
                    if ratings[j] > ratings[j+1] and retList[j] == retList[j+1]:
                        retList[j] += 1
                    else:
                        break
        return sum(retList)

解法二：

首先，我们分解一下具体问题：

假如我们知道了 i - 1 和 i + 1 个孩子分配的糖果个数，那么给第 i 个孩子分配糖果个数的问题就迎刃而解了。

所以，我们把解决 i 的问题 转换为了 i - 1 和 i + 1 的子问题，看起来是递归呐。

当然了，递归涉及到很多重复计算，那就动态规划喽。然而如果我们试图直接寻找转移方程，会发现非常的困难。

那么我们把问题转换一下，变成：

相邻的孩子中，评分高 且站在右边 的孩子必须获得更多的糖果
相邻的孩子中，评分高 且站在左边 的孩子必须获得更多的糖果
针对第1个问题，我们把解决 i 的问题 转换为了 i - 1 的子问题；针对第2个问题，我们把解决 i 的问题 转换为了 i + 1 的子问题

因此，针对问题1，我们从前到后扫描一遍即可（其实是一次最简单的动态规划，类似于求最大子序列和或者斐波那契数那种）；针对问题2，再从后到前扫描一遍，此时，与前一遍扫描计算的结果相比，取最大值即可。


class Solution:
    def candy(self, ratings: List[int]) -> int:

        res = [1 for _ in range(len(ratings))]
        
        for i in range(1, len(ratings)):
            if ratings[i] > ratings[i-1]:
                res[i] = res[i - 1] + 1
        
        for i in range(len(ratings)-2,-1,-1):
            if ratings[i] > ratings[i+1]:
                res[i] = max(res[i],res[i + 1] + 1)
        # print(res)
        return sum(res)

