215. 数组中的第K个最大元素
在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。

示例 1:

输入: [3,2,1,5,6,4] 和 k = 2
输出: 5
示例 2:

输入: [3,2,3,1,2,4,5,5,6] 和 k = 4
输出: 4

class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        # 普通的sort()方法
        # 时间复杂度O(N*logN),空间复杂度O(1)
        nums.sort()
        return nums[-k]
        
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        from heapq import heappush,heapreplace
        # 使用堆的nlargest(n,iter)返回前n个最大的数,倒序排练
        return nlargest(k,nums)[-1]


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        from heapq import heappush,heapreplace       
        # 使用小顶堆
        heap = []
        for i in range(len(nums)):
            if i < k:
            #push进来的数字会进行排序的。也就是说，进来四位。在这四位中，排在[0]的便是第四大。
                heappush(heap,nums[i])
            else:
                if nums[i] > heap[0]:
                    m = heapreplace(heap,nums[i])
        return heap[0]


