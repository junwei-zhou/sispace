659. 分割数组为连续子序列
给你一个按升序排序的整数数组 num（可能包含重复数字），请你将它们分割成一个或多个子序列，其中每个子序列都由连续整数组成且长度至少为 3 。

如果可以完成上述分割，则返回 true ；否则，返回 false 。

 

示例 1：

输入: [1,2,3,3,4,5]
输出: True
解释:
你可以分割出这样两个连续子序列 : 
1, 2, 3
3, 4, 5
示例 2：

输入: [1,2,3,3,4,4,5,5]
输出: True
解释:
你可以分割出这样两个连续子序列 : 
1, 2, 3, 4, 5
3, 4, 5


import collections
class Solution:
    def isPossible(self, nums: List[int]) -> bool:
        a = collections.Counter(nums)
        d = collections.defaultdict(int)
        for i in nums:
            while a[i] > 0:
                if d[i - 1] > 0:
                    d[i - 1] -= 1
                    d[i] += 1
                else:
                    if a[i + 1] == 0 or a[i + 2] == 0:
                        return False
                    else:
                        a[i + 1] -= 1
                        a[i + 2] -= 1
                        d[i + 2] += 1
                a[i] -= 1
        return True



class Solution:
    def isPossible(self, nums: List[int]) -> bool:
        # 记录元素出现次数
        counter = dict()
        for n in nums:
            counter[n] = counter.get(n, 0) + 1
            
        end = dict()
        for n in nums:
            if counter[n] == 0:
                continue
                
            counter[n] -= 1
            if end.get(n - 1, 0) > 0:
                # 添加到已有子序列的末尾
                end[n - 1] -= 1
                end[n] = end.get(n, 0) + 1
            elif counter.get(n + 1, 0) > 0 and counter.get(n + 2, 0) > 0:
                # 添加到子序列头部
                counter[n + 1] -= 1
                counter[n + 2] -= 1
                end[n + 2] = end.get(n + 2, 0) + 1
            else:
                return False
        return True

