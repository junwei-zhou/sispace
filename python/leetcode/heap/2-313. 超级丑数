313. 超级丑数
编写一段程序来查找第 n 个超级丑数。

超级丑数是指其所有质因数都是长度为 k 的质数列表 primes 中的正整数。

示例:

输入: n = 12, primes = [2,7,13,19]
输出: 32 
解释: 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。

class Solution:
    def nthSuperUglyNumber(self, n: int, primes: List[int]) -> int:
        dp = [0] * n
        pointer = [0] * len(primes)
        dp[0] = 1
        for i in range(1, n):
            dp[i] = min(x * dp[y] for x, y in zip(primes, pointer))
            for j in range(len(primes)):
                if dp[i] == primes[j] * dp[pointer[j]]:
                    pointer[j] += 1
        return dp[-1]


