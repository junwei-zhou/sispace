787. K 站中转内最便宜的航班
有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。

现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。 如果没有这样的路线，则输出 -1。

示例 1：

输入: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
输出: 200

示例 2：

输入: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
输出: 500


class Solution:
    def findCheapestPrice(self, n: int, flights: List[List[int]], src: int, dst: int, K: int) -> int:
        # 贝尔曼-福特算法
        from copy import deepcopy
        res = [float("inf")] * n
        K = min(K, n - 2)
        res[src] = 0
        for k in range(K + 1):
            ans = deepcopy(res)
            for f in flights:
                ans[f[1]] = min(ans[f[1]], res[f[0]] + f[2])
            res = deepcopy(ans)
        return res[dst] if res[dst] != float("inf") else -1       



